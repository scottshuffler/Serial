
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017e  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000225  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000166  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
  7e:	00 00       	nop
  80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
  82:	00 00       	nop
  84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
  86:	00 00       	nop
  88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
  92:	00 00       	nop
  94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
  96:	00 00       	nop
  98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	61 c0       	rjmp	.+194    	; 0x170 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	5f c0       	rjmp	.+190    	; 0x170 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5d c0       	rjmp	.+186    	; 0x170 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5b c0       	rjmp	.+182    	; 0x170 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	59 c0       	rjmp	.+178    	; 0x170 <__bad_interrupt>
  be:	00 00       	nop
  c0:	57 c0       	rjmp	.+174    	; 0x170 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	55 c0       	rjmp	.+170    	; 0x170 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	53 c0       	rjmp	.+166    	; 0x170 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	51 c0       	rjmp	.+162    	; 0x170 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	4f c0       	rjmp	.+158    	; 0x170 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4d c0       	rjmp	.+154    	; 0x170 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4b c0       	rjmp	.+150    	; 0x170 <__bad_interrupt>
  da:	00 00       	nop
  dc:	49 c0       	rjmp	.+146    	; 0x170 <__bad_interrupt>
  de:	00 00       	nop
  e0:	47 c0       	rjmp	.+142    	; 0x170 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a9 01       	movw	r20, r18
  e6:	a9 01       	movw	r20, r18
  e8:	a9 01       	movw	r20, r18
  ea:	a9 01       	movw	r20, r18
  ec:	b5 01       	movw	r22, r10
  ee:	b5 01       	movw	r22, r10
  f0:	b5 01       	movw	r22, r10
  f2:	b5 01       	movw	r22, r10
  f4:	a9 01       	movw	r20, r18
  f6:	a9 01       	movw	r20, r18
  f8:	a9 01       	movw	r20, r18
  fa:	a9 01       	movw	r20, r18
  fc:	b5 01       	movw	r22, r10
  fe:	b5 01       	movw	r22, r10
 100:	b5 01       	movw	r22, r10
 102:	b5 01       	movw	r22, r10
 104:	b5 01       	movw	r22, r10
 106:	b5 01       	movw	r22, r10
 108:	b5 01       	movw	r22, r10
 10a:	b5 01       	movw	r22, r10
 10c:	b5 01       	movw	r22, r10
 10e:	b5 01       	movw	r22, r10
 110:	b5 01       	movw	r22, r10
 112:	b5 01       	movw	r22, r10
 114:	b5 01       	movw	r22, r10
 116:	b5 01       	movw	r22, r10
 118:	b5 01       	movw	r22, r10
 11a:	b5 01       	movw	r22, r10
 11c:	b5 01       	movw	r22, r10
 11e:	b5 01       	movw	r22, r10
 120:	b5 01       	movw	r22, r10
 122:	b5 01       	movw	r22, r10
 124:	a9 01       	movw	r20, r18
 126:	a9 01       	movw	r20, r18
 128:	a9 01       	movw	r20, r18
 12a:	a9 01       	movw	r20, r18
 12c:	b5 01       	movw	r22, r10
 12e:	b5 01       	movw	r22, r10
 130:	b5 01       	movw	r22, r10
 132:	b5 01       	movw	r22, r10
 134:	a9 01       	movw	r20, r18
 136:	a9 01       	movw	r20, r18
 138:	a9 01       	movw	r20, r18
 13a:	a9 01       	movw	r20, r18
 13c:	b5 01       	movw	r22, r10
 13e:	b5 01       	movw	r22, r10
 140:	b5 01       	movw	r22, r10
 142:	b5 01       	movw	r22, r10
 144:	a9 01       	movw	r20, r18
 146:	a9 01       	movw	r20, r18
 148:	a9 01       	movw	r20, r18
 14a:	a9 01       	movw	r20, r18
 14c:	b5 01       	movw	r22, r10
 14e:	b5 01       	movw	r22, r10
 150:	b5 01       	movw	r22, r10
 152:	b5 01       	movw	r22, r10
 154:	a9 01       	movw	r20, r18
 156:	a9 01       	movw	r20, r18
 158:	a9 01       	movw	r20, r18
 15a:	a9 01       	movw	r20, r18

0000015c <__ctors_end>:
 15c:	11 24       	eor	r1, r1
 15e:	1f be       	out	0x3f, r1	; 63
 160:	cf ef       	ldi	r28, 0xFF	; 255
 162:	d1 e2       	ldi	r29, 0x21	; 33
 164:	de bf       	out	0x3e, r29	; 62
 166:	cd bf       	out	0x3d, r28	; 61
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	0c bf       	out	0x3c, r16	; 60
 16c:	07 d1       	rcall	.+526    	; 0x37c <main>
 16e:	1f c1       	rjmp	.+574    	; 0x3ae <_exit>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <serial_open>:
//Serial open function
//Takes in the speed(baud) and the config (bit definitions)
void serial_open(long speed, int config)
{
	//INIT USART
	switch (speed)
 172:	60 38       	cpi	r22, 0x80	; 128
 174:	20 e7       	ldi	r18, 0x70	; 112
 176:	72 07       	cpc	r23, r18
 178:	81 05       	cpc	r24, r1
 17a:	91 05       	cpc	r25, r1
 17c:	09 f4       	brne	.+2      	; 0x180 <serial_open+0xe>
 17e:	8f c0       	rjmp	.+286    	; 0x29e <serial_open+0x12c>
 180:	24 f5       	brge	.+72     	; 0x1ca <serial_open+0x58>
 182:	60 38       	cpi	r22, 0x80	; 128
 184:	25 e2       	ldi	r18, 0x25	; 37
 186:	72 07       	cpc	r23, r18
 188:	81 05       	cpc	r24, r1
 18a:	91 05       	cpc	r25, r1
 18c:	09 f4       	brne	.+2      	; 0x190 <serial_open+0x1e>
 18e:	63 c0       	rjmp	.+198    	; 0x256 <serial_open+0xe4>
 190:	74 f4       	brge	.+28     	; 0x1ae <serial_open+0x3c>
 192:	60 36       	cpi	r22, 0x60	; 96
 194:	29 e0       	ldi	r18, 0x09	; 9
 196:	72 07       	cpc	r23, r18
 198:	81 05       	cpc	r24, r1
 19a:	91 05       	cpc	r25, r1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <serial_open+0x2e>
 19e:	43 c0       	rjmp	.+134    	; 0x226 <serial_open+0xb4>
 1a0:	60 3c       	cpi	r22, 0xC0	; 192
 1a2:	72 41       	sbci	r23, 0x12	; 18
 1a4:	81 05       	cpc	r24, r1
 1a6:	91 05       	cpc	r25, r1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <serial_open+0x3a>
 1aa:	49 c0       	rjmp	.+146    	; 0x23e <serial_open+0xcc>
 1ac:	08 95       	ret
 1ae:	60 34       	cpi	r22, 0x40	; 64
 1b0:	28 e3       	ldi	r18, 0x38	; 56
 1b2:	72 07       	cpc	r23, r18
 1b4:	81 05       	cpc	r24, r1
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <serial_open+0x4a>
 1ba:	59 c0       	rjmp	.+178    	; 0x26e <serial_open+0xfc>
 1bc:	61 15       	cp	r22, r1
 1be:	7b 44       	sbci	r23, 0x4B	; 75
 1c0:	81 05       	cpc	r24, r1
 1c2:	91 05       	cpc	r25, r1
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <serial_open+0x56>
 1c6:	5f c0       	rjmp	.+190    	; 0x286 <serial_open+0x114>
 1c8:	08 95       	ret
 1ca:	61 15       	cp	r22, r1
 1cc:	2c e2       	ldi	r18, 0x2C	; 44
 1ce:	72 07       	cpc	r23, r18
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	82 07       	cpc	r24, r18
 1d4:	91 05       	cpc	r25, r1
 1d6:	09 f4       	brne	.+2      	; 0x1da <serial_open+0x68>
 1d8:	86 c0       	rjmp	.+268    	; 0x2e6 <serial_open+0x174>
 1da:	74 f4       	brge	.+28     	; 0x1f8 <serial_open+0x86>
 1dc:	61 15       	cp	r22, r1
 1de:	26 e9       	ldi	r18, 0x96	; 150
 1e0:	72 07       	cpc	r23, r18
 1e2:	81 05       	cpc	r24, r1
 1e4:	91 05       	cpc	r25, r1
 1e6:	09 f4       	brne	.+2      	; 0x1ea <serial_open+0x78>
 1e8:	66 c0       	rjmp	.+204    	; 0x2b6 <serial_open+0x144>
 1ea:	61 15       	cp	r22, r1
 1ec:	71 4e       	sbci	r23, 0xE1	; 225
 1ee:	81 05       	cpc	r24, r1
 1f0:	91 05       	cpc	r25, r1
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <serial_open+0x84>
 1f4:	6c c0       	rjmp	.+216    	; 0x2ce <serial_open+0x15c>
 1f6:	08 95       	ret
 1f8:	61 15       	cp	r22, r1
 1fa:	24 e8       	ldi	r18, 0x84	; 132
 1fc:	72 07       	cpc	r23, r18
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	82 07       	cpc	r24, r18
 202:	91 05       	cpc	r25, r1
 204:	09 f4       	brne	.+2      	; 0x208 <serial_open+0x96>
 206:	87 c0       	rjmp	.+270    	; 0x316 <serial_open+0x1a4>
 208:	60 39       	cpi	r22, 0x90	; 144
 20a:	20 ed       	ldi	r18, 0xD0	; 208
 20c:	72 07       	cpc	r23, r18
 20e:	23 e0       	ldi	r18, 0x03	; 3
 210:	82 07       	cpc	r24, r18
 212:	91 05       	cpc	r25, r1
 214:	09 f4       	brne	.+2      	; 0x218 <serial_open+0xa6>
 216:	8b c0       	rjmp	.+278    	; 0x32e <serial_open+0x1bc>
 218:	61 15       	cp	r22, r1
 21a:	72 4c       	sbci	r23, 0xC2	; 194
 21c:	81 40       	sbci	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	09 f0       	breq	.+2      	; 0x224 <serial_open+0xb2>
 222:	a3 c0       	rjmp	.+326    	; 0x36a <serial_open+0x1f8>
 224:	6c c0       	rjmp	.+216    	; 0x2fe <serial_open+0x18c>
	{
	case 2400:
		UBRR0 = 832;
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	90 93 c5 00 	sts	0x00C5, r25
 22e:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A |= (1<<U2X0);
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
		break;
 23c:	83 c0       	rjmp	.+262    	; 0x344 <serial_open+0x1d2>
	case 4800:
		UBRR0 = 207;
 23e:	8f ec       	ldi	r24, 0xCF	; 207
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 c5 00 	sts	0x00C5, r25
 246:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8d 7f       	andi	r24, 0xFD	; 253
 252:	80 83       	st	Z, r24
		break;
 254:	77 c0       	rjmp	.+238    	; 0x344 <serial_open+0x1d2>
	case 9600:
		UBRR0 = 103;
 256:	87 e6       	ldi	r24, 0x67	; 103
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 c5 00 	sts	0x00C5, r25
 25e:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 262:	e0 ec       	ldi	r30, 0xC0	; 192
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	80 83       	st	Z, r24
		break;
 26c:	6b c0       	rjmp	.+214    	; 0x344 <serial_open+0x1d2>
	case 14400:
		UBRR0 = 68;
 26e:	84 e4       	ldi	r24, 0x44	; 68
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 c5 00 	sts	0x00C5, r25
 276:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
		break;
 284:	5f c0       	rjmp	.+190    	; 0x344 <serial_open+0x1d2>
	case 19200:
		UBRR0 = 51;
 286:	83 e3       	ldi	r24, 0x33	; 51
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 c5 00 	sts	0x00C5, r25
 28e:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 292:	e0 ec       	ldi	r30, 0xC0	; 192
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	80 83       	st	Z, r24
		break;
 29c:	53 c0       	rjmp	.+166    	; 0x344 <serial_open+0x1d2>
	case 28800:
		UBRR0 = 68;
 29e:	84 e4       	ldi	r24, 0x44	; 68
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 c5 00 	sts	0x00C5, r25
 2a6:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A |= (1<<U2X0);
 2aa:	e0 ec       	ldi	r30, 0xC0	; 192
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
		break;
 2b4:	47 c0       	rjmp	.+142    	; 0x344 <serial_open+0x1d2>
	case 38400:
		UBRR0 = 25;
 2b6:	89 e1       	ldi	r24, 0x19	; 25
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 c5 00 	sts	0x00C5, r25
 2be:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	80 83       	st	Z, r24
		break;
 2cc:	3b c0       	rjmp	.+118    	; 0x344 <serial_open+0x1d2>
	case 57600:
		UBRR0 = 16;
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 c5 00 	sts	0x00C5, r25
 2d6:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 2da:	e0 ec       	ldi	r30, 0xC0	; 192
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	80 83       	st	Z, r24
		break;
 2e4:	2f c0       	rjmp	.+94     	; 0x344 <serial_open+0x1d2>
	case 76800:
		UBRR0 = 12;
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 c5 00 	sts	0x00C5, r25
 2ee:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 2f2:	e0 ec       	ldi	r30, 0xC0	; 192
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	80 83       	st	Z, r24
		break;
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <serial_open+0x1d2>
	case 115200:
		UBRR0 = 16;
 2fe:	80 e1       	ldi	r24, 0x10	; 16
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 c5 00 	sts	0x00C5, r25
 306:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A |= (1<<U2X0);
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	82 60       	ori	r24, 0x02	; 2
 312:	80 83       	st	Z, r24
		break;
 314:	17 c0       	rjmp	.+46     	; 0x344 <serial_open+0x1d2>
	case 230400:
		UBRR0 = 3;
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 c5 00 	sts	0x00C5, r25
 31e:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	8d 7f       	andi	r24, 0xFD	; 253
 32a:	80 83       	st	Z, r24
		break;
 32c:	0b c0       	rjmp	.+22     	; 0x344 <serial_open+0x1d2>
	case 250000:
		UBRR0 = 3;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 c5 00 	sts	0x00C5, r25
 336:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A &= ~(1<<U2X0);
 33a:	e0 ec       	ldi	r30, 0xC0	; 192
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	8d 7f       	andi	r24, 0xFD	; 253
 342:	80 83       	st	Z, r24
		break;
	default:
		return;
	}
	switch (config)
 344:	4c 33       	cpi	r20, 0x3C	; 60
 346:	51 05       	cpc	r21, r1
 348:	80 f4       	brcc	.+32     	; 0x36a <serial_open+0x1f8>
 34a:	fa 01       	movw	r30, r20
 34c:	ee 58       	subi	r30, 0x8E	; 142
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	28 c0       	rjmp	.+80     	; 0x3a2 <__tablejump2__>
		break;
		default:
			return;
	}
	//Set UBRRH to the sig bits
	UBRR0H = (UBRR0 >> 8);
 352:	e4 ec       	ldi	r30, 0xC4	; 196
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	90 93 c5 00 	sts	0x00C5, r25
	//Set UBRRL to the rest 
	UBRR0L =  UBRR0;
 35e:	80 81       	ld	r24, Z
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	80 83       	st	Z, r24
	//Enables TX and RX
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 364:	88 e1       	ldi	r24, 0x18	; 24
 366:	80 93 c1 00 	sts	0x00C1, r24
 36a:	08 95       	ret

0000036c <serial_read>:
	
}

char serial_read()
{
	while (!(UCSR0A & (1<<RXC0)))
 36c:	e0 ec       	ldi	r30, 0xC0	; 192
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	ec f7       	brge	.-6      	; 0x370 <serial_read+0x4>
	{
		;
	}
	return UDR0;
 376:	80 91 c6 00 	lds	r24, 0x00C6
}
 37a:	08 95       	ret

0000037c <main>:
char serial_read();
void serial_write(unsigned char write);

int main(void)
{
	serial_open(19200, SERIAL_8N1);
 37c:	43 e0       	ldi	r20, 0x03	; 3
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	7b e4       	ldi	r23, 0x4B	; 75
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	f4 de       	rcall	.-536    	; 0x172 <serial_open>
    while(1)
    {
		if(serial_read())
		{
			serial_write((unsigned char)(UDR0));
 38a:	c6 ec       	ldi	r28, 0xC6	; 198
 38c:	d0 e0       	ldi	r29, 0x00	; 0
	return UDR0;
}

void serial_write(unsigned char write)
{
	while((!UCSR0A) & (1<<UDRE0))
 38e:	00 ec       	ldi	r16, 0xC0	; 192
 390:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	serial_open(19200, SERIAL_8N1);
    while(1)
    {
		if(serial_read())
 392:	ec df       	rcall	.-40     	; 0x36c <serial_read>
 394:	88 23       	and	r24, r24
 396:	e9 f3       	breq	.-6      	; 0x392 <main+0x16>
		{
			serial_write((unsigned char)(UDR0));
 398:	88 81       	ld	r24, Y
	return UDR0;
}

void serial_write(unsigned char write)
{
	while((!UCSR0A) & (1<<UDRE0))
 39a:	f8 01       	movw	r30, r16
 39c:	90 81       	ld	r25, Z
	{
		;
	}
	UDR0 = write;
 39e:	88 83       	st	Y, r24
 3a0:	f8 cf       	rjmp	.-16     	; 0x392 <main+0x16>

000003a2 <__tablejump2__>:
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31

000003a6 <__tablejump__>:
 3a6:	05 90       	lpm	r0, Z+
 3a8:	f4 91       	lpm	r31, Z
 3aa:	e0 2d       	mov	r30, r0
 3ac:	19 94       	eijmp

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
